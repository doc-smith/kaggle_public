#!/usr/bin/env python

import argparse
import os
import sys


def get_bytes(lines):
    bts = []
    for line in lines:
        offset, bts_str = line.rstrip().split(" ", 1)
        bts += map(lambda x: int(x.replace("?", "0"), 16), bts_str.split(" "))
    return bytearray(bts)


GOOD_CHARS = (
        "/",
        ":",
        "?",
        "=",
        "&",
        ".",
        "\\",
        "#",
        " ",
        "<",
        ">",
        "'",
        "\"",
        "-",
        "_",
        "\t",
        "(",
        ")",
        ",",
        ";",
        "!",
    )


def is_good_char(c):
    return c.isalpha() or c.isdigit() or c in GOOD_CHARS


def detect_ascii(bts):
    strings = []
    buf = []
    for b in bts:
        c = chr(b)
        if is_good_char(c):
            buf.append(c)
        else:
            if len(buf) > 4:
                strings.append("".join(buf).strip())
            buf = []
    return strings


def detect_unicode(bts):
    strings = []
    buf = []
    for i in xrange(0, len(bts), 2):
        c = chr(bts[i])
        if bts[i + 1] == 0 and is_good_char(c):
            buf.append(c)
        else:
            if len(buf) > 4:
                strings.append("".join(buf).strip())
            buf = []
    return strings


def main():
    arg_parser = argparse.ArgumentParser()
    arg_parser.add_argument("data_dir")
    arg_parser.add_argument("output_dir")
    args = arg_parser.parse_args()

    for filename in os.listdir(args.data_dir):
        if not filename.endswith(".bytes"):
            continue
        binary_id = os.path.splitext(os.path.basename(filename))[0]
        with open(os.path.join(args.data_dir, filename), "r") as inp:
            lines = inp.readlines()
            bts = get_bytes(lines)

            with open(os.path.join(args.output_dir, binary_id) + ".ascii", "w") as out:
                ascii_strings = detect_ascii(bts)
                for string in ascii_strings:
                    print >>out, string
            with open(os.path.join(args.output_dir, binary_id) + ".unicode", "w") as out:
                unicode_strings = detect_unicode(bts)
                for string in unicode_strings:
                    print >>out, string


if __name__ == "__main__":
    sys.exit(main())
