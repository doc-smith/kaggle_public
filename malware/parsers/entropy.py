#!/usr/bin/env python

import argparse
import collections
import hashlib
import json
import os
import sys

import numpy as np


def get_bytes(lines):
    res = []
    for line in lines:
        bts = line.rstrip().split(" ")[1:]
        res += map(lambda x: int(x.replace("?", "0"), 16), bts)
    return bytearray(res)


def calc_entropy(seq):
    counts = collections.Counter(seq)
    seqlen = len(seq)
    infoc = 0
    for b, c in counts.iteritems():
        freq = float(c) / seqlen
        infoc += freq * np.log2(freq)
    return -infoc


def get_section_entropies(js):
    bytes_filename = js["filename"].replace(".asm", ".bytes")
    with open(bytes_filename, "r") as inp:
        lines = inp.readlines()
        startoffset = int(lines[0].split(" ")[0], 16)
        bts = get_bytes(lines)

    entropies = {}
    for section in js["sections"]["sections"]:
        start = section["start"]
        size = section["size_in_file"]
        section_data = bts[(start - startoffset):(start - startoffset + size)]
        entropies[section["name"]] = {
            "entropy": calc_entropy(section_data),
            "sha256": hashlib.sha256(section_data).hexdigest()
        }
    for section in js["sections"]["collapsed"]:
        if section["name"] != "header":
            start = section["start"]
            size = section["size"]
            section_data = bts[(start - startoffset):(start - startoffset + size)]
            entropies[section["name"]] = {
                "entropy": calc_entropy(section_data),
                "sha256": hashlib.sha256(section_data).hexdigest()
            }
    return entropies


def main():
    arg_parser = argparse.ArgumentParser()
    arg_parser.add_argument("parsed_dir")
    arg_parser.add_argument("output_dir")
    args = arg_parser.parse_args()

    for filename in os.listdir(args.parsed_dir):
        with open(os.path.join(args.parsed_dir, filename), "r") as inp:
            for line in inp:
                js = json.loads(line)
                entropies = get_section_entropies(js)
                binary_id = os.path.splitext(
                        os.path.basename(js["filename"])
                    )[0]
                with open(os.path.join(args.output_dir, binary_id), "w") as out:
                    print >>out, json.dumps(entropies)

if __name__ == "__main__":
    sys.exit(main())
