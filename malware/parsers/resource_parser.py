#!/usr/bin/env python

import argparse
import collections
import json
import os
import struct
import sys


def get_bytes(lines):
    res = []
    for line in lines:
        bts = line.rstrip().split(" ")[1:]
        res += map(lambda x: int(x.replace("?", "0"), 16), bts)
    return bytearray(res)


def read_from_bytes(filename, offset, size):
    with open(filename, "r") as inp:
        lines = inp.readlines()
        startoffset = int(lines[0].split(" ")[0], 16)
        bts = get_bytes(lines)
        return bts[(offset - startoffset):(offset - startoffset + size)]


RESOURCE_TYPES = {
    1: "RT_CURSOR",
    2: "RT_BITMAP",
    3: "RT_ICON",
    4: "RT_MENU",
    5: "RT_DIALOG",
    6: "RT_STRING",
    7: "RT_FONTDIR",
    8: "RT_FOND",
    9: "RT_ACCELERATOR",
    10: "RT_RCDATA",
    11: "RT_MESSAGETABLE",
    14: "RT_GRPICON",
    16: "RT_VERSION",
    20: "RT_VXD",
    24: "RT_MANIFEST"
}


def decode(bts):
    IMAGE_RESOURCE_DIRECTORY_SIZE = 16
    IMAGE_RESOURCE_DIRECTORY_ENTRY_SIZE = 8

    _, _, _, _, named_entries, id_entries = \
        struct.unpack("IIHHHH", bts[:IMAGE_RESOURCE_DIRECTORY_SIZE])

    offset = IMAGE_RESOURCE_DIRECTORY_SIZE
    rtypes = collections.defaultdict(int)
    for i in xrange(named_entries + id_entries):
        if offset + IMAGE_RESOURCE_DIRECTORY_SIZE <= len(bts):
            name, _ = struct.unpack(
                "II",
                bts[offset:(offset + IMAGE_RESOURCE_DIRECTORY_ENTRY_SIZE)]
            )
            rtype = RESOURCE_TYPES.get(name, "UNKNOWN")
            rtypes[rtype] += 1
            offset += IMAGE_RESOURCE_DIRECTORY_ENTRY_SIZE
    return {
        "named_entries": named_entries,
        "id_entries": id_entries,
        "types": rtypes
    }


def get_resources(js):
    for section in js["sections"]["collapsed"]:
        if section["name"] == "rsrc":
            bytes_filename = js["filename"].replace(".asm", ".bytes")
            start = section["start"]
            size = section["size"]
            section_data = read_from_bytes(bytes_filename, start, size)
            return decode(section_data)


def main():
    arg_parser = argparse.ArgumentParser()
    arg_parser.add_argument("parsed_dir")
    arg_parser.add_argument("output_dir")
    args = arg_parser.parse_args()

    for filename in os.listdir(args.parsed_dir):
        with open(os.path.join(args.parsed_dir, filename), "r") as inp:
            for line in inp:
                js = json.loads(line)
                res = get_resources(js)
                if res is not None:
                    binary_id = os.path.splitext(
                        os.path.basename(js["filename"])
                    )[0]
                    with open(os.path.join(args.output_dir, binary_id), "w") as out:
                        print >>out, json.dumps(res)


if __name__ == "__main__":
    sys.exit(main())
